管道和重定向
计算机组成：CPU(运算器、控制器)、存储器(RAM)、输入设备\输出设备、程序
地址总线：内存寻址
数据总线：传输数据
控制总线：控制指令
寄存器：CPU暂时存储器
I/O：硬盘、数据交互
系统设定：
  默认输出设备：标准输出STDOUT,1
  默认输入设备：标准输入STDIN,0
  标准错误输出：STDERR，2
  标准输入：键盘
  标准输出和错误输出：显示器
  
I/O重定向(Linux):
> :输出重定向，会覆盖原有内容(覆盖输出)
>> :追加输出
set 内置命令，man手册查一下，很重要
set -C :禁止对已经存在文件的文件使用覆盖重定向
set +C :允许对已经存在文件的文件使用覆盖重定向
2> :重定向错误输出
2>> :追加方式重定向错误输出
  例如：ls /var > /tmp/var4.out 2> /tmp/err.out
  (意思：如果重定向信息流正确，则输出到/tmp/var4.ou，否则输出到/tmp/err.out)
&> :重定向标准输出或错误输出至同一个文件中
< :输入重定向
<< :Here Document
  例：cat >> /tmp/myfile.txt << EOF(结束符)  可以在脚本中生成文档

管道：命令也可以使用管道，以“ | ” 为传递，前一个命令的输出可以作为后一个命令的输入
    例如：命令1 | 命令2 | .........
    例如:echo "HELLO WORLD." | tr 'a-z' 'A-Z'
tee 命令：一个输入，两个输出，用来既保存重定向，又显示在屏幕上
  练习：
  1.统计/usr/bin/目录下的文件个数
  答：ls /usr/bin | wc -l
  2.取出当前系统上所有用户的shell，要求每种shell只显示一次，并且按照顺序排序
  答：cut -d: -f7 /etc/passwd |sort -u
  3.思考如何显示/var/log目录下每个文件的内容类型
  答：file /var/log/*
  4.取出/etc/inittab文件的第6行
  答：head -6 /etc/inittab | tail -1
  5.取出/etc/passwd 文件中倒数第9个用户的用户名和shell，显示到屏幕并保存到/tmp/users 中
  答：tail -9 /etc/passwd |head -1 | cut -d: -f1,7 | tee /tmp/users
  6.显示/etc目录下所有以pa开头的文件，并统计其个数
  答：ls -d /etc/pa* | wc -l        (不加-d 就会把目录下的子文件也显示了)
  7.不使用文本编辑器，将 alias cls=clear 一行内容添加至当前用户的.bashrc 文件中
  答：printf "alias cls=clear" >>~/.bashrc
----------------------------------------------------------------------------------------
    grep及正则表达式：
文本查找的需要：grep、egrep、fgrep
grep:Global Research (根据模式搜索文本，并将符合模式的文本行显示出来，是局部匹配),可加选项
Pattern:模式，有文本字符和正则表达式的元字符组成而成匹配条件
用法：grep [option] pattern [file .....]
    -i:忽略大小写
    --color:加颜色显示
    -v:显示没有被模式匹配的行
    -o:只显示被模式匹配的字符
    -E：使用扩展正则表达式
    -A #:跟数字，表示显示搜到的字符连同其后几行一起显示
    -B #:跟数字，表示显示搜到的字符连同其前几行一起显示
    -C #：跟数字，表示显示搜到的字符连同其前后几行一起显示
    
正则表达式：Regular Expression,简写REGEXP
元字符：
 . ：匹配任意单个字符
 [] ：匹配指定范围内的任意单个字符，[^]则是范围外的
 字符集合：[:digit:]、[:lower:]、[:upper:]、[:punct:]、[:space:]、[:alpha:]、[:alnum:](使用时还要再加[] ,具体意思看之前的笔记)
正则表达式默认工作在贪婪模式下，它会尽可能匹配多个
匹配次数：
* ：匹配其前面的字符任意次，跟之前的‘ * ’意思不一样
  例：a,b,ab,aab,acb,adb,amnb
  匹配a*b  能匹配上有：b,ab,aab
.* :任意长度的任意字符
\？ ：匹配其前面的字符1次或0次，注意：\？ 是转义字符
\{m,n\} ：匹配其前面的字符至少m次，最多n次
    例如：grep 'a\{1,3\}b' file
    
 位置锚定：
^ ：锚定行首，此字符后面的任意内容必须出现在行首
 用法：grep '^r..t' /etc/passwd
$ :锚定行尾，此字符前面的任意内容必须出现在行尾
 用法：grep 'y$' /etc/passwd
^$ ：空白行
\b或\< :锚定词首，其后面的任意字符必须作为单词的首部出现
\b或\> :锚定词尾，其前面的任意字符必须作为单词的尾部出现

分组：
\(\) :主要作用是后向引用
 \1：以第一个左括号出现的结果作为条件
 \2：以第二个左括号出现的结果作为条件
 ....................
例如：grep '\(l..e\).* \1' test.txt
两种正则表达式：
1.Basic REGEXP(基本)
2.Extended REGEXP(扩展)
